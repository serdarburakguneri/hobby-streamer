# /local/fluentd/fluent.conf

########################################################
# 1) INPUT: accept forwards from Docker logging driver
########################################################
<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

########################################################
# 2) PARSE incoming key=value logs
########################################################
<filter **>
  @type parser
  key_name log
  <parse>
    @type regexp
    expression /^time=(?<time>[^ ]+) level=(?<level>[^ ]+) msg="(?<msg>[^"]*)"(?: service=(?<service>[^ ]+))?(?: method=(?<method>[^ ]+))?(?: path=(?<path>[^ ]+))?(?: remote_addr=(?<remote_addr>[^ ]+))?(?: user_agent="(?<user_agent>[^"]*)")?(?: content_length=(?<content_length>[^ ]+))?(?: tracking_id=(?<tracking_id>[^ ]+))?(?: status_code=(?<status_code>[^ ]+))?(?: duration_ms=(?<duration_ms>[^ ]+))?(?: duration=(?<duration>[^ ]+))?(?: bucket_id=(?<bucket_id>[^ ]+))?(?: name=(?<name>[^ ]+))?(?: count=(?<count>[^ ]+))?(?: requested_ids=(?<requested_ids>[^ ]+))?/
    time_key time
    time_format %Y-%m-%dT%H:%M:%S.%L%z
    time_type string
  </parse>
</filter>

########################################################
# 3) TRANSFORM: flatten, tag and timestamp
########################################################
<filter **>
  @type record_transformer
  enable_ruby true

  <record>
    @timestamp    ${Time.at(time).iso8601}
    service_name  ${record["service"] || tag}
    level         ${record["level"]       || ""}
    msg           ${record["msg"]         || ""}
    method        ${record["method"]      || ""}
    path          ${record["path"]        || ""}
    status_code   ${record["status_code"] || ""}
    duration_ms   ${record["duration_ms"] || ""}
    duration      ${record["duration"]    || ""}
    request_id    ${record["request_id"]  || ""}
    tracking_id   ${record["tracking_id"] || ""}
    user_id       ${record["user_id"]     || ""}
    username      ${record["username"]    || ""}
    remote_addr   ${record["remote_addr"] || ""}
    user_agent    ${record["user_agent"]  || ""}
    content_length ${record["content_length"] || ""}
    bucket_id     ${record["bucket_id"]   || ""}
    name          ${record["name"]        || ""}
    count         ${record["count"]       || ""}
    requested_ids ${record["requested_ids"] || ""}
    original_log  ${record["log"]         || ""}
  </record>
</filter>

########################################################
# 4) OUTPUT: ship into Elasticsearch
########################################################
<match **>
  @type elasticsearch
  host              elasticsearch
  port              9200
  logstash_format   true
  logstash_prefix   docker-logs
  logstash_dateformat %Y.%m.%d
  include_timestamp true

  <buffer>
    @type              memory
    flush_interval     5s
    chunk_limit_size   2M
    queue_limit_length 8
    retry_forever      true
  </buffer>
</match>