worker_processes 1;
events { worker_connections 1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    upstream s3_primary {
        server localstack:4566;
    }

    upstream s3_secondary {
        server localstack:4566;
    }

    server {
        listen 8083;
        server_name _;

        # Health check endpoint
        location /health {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Set correct MIME type for .m3u8
        location ~* \.m3u8$ {
            rewrite ^/cdn/(.*)$ /content-east/$1 break;
            proxy_pass http://s3_primary;
            proxy_intercept_errors on;
            error_page 502 503 504 500 = @m3u8_failover;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header Content-Type "application/vnd.apple.mpegurl" always;
        }

        location @m3u8_failover {
            rewrite ^/cdn/(.*)$ /content-west/$1 break;
            proxy_pass http://s3_secondary;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header Content-Type "application/vnd.apple.mpegurl" always;
            add_header X-CDN-Failover "true" always;
        }

        # Set correct MIME type for .ts
        location ~* \.ts$ {
            rewrite ^/cdn/(.*)$ /content-east/$1 break;
            proxy_pass http://s3_primary;
            proxy_intercept_errors on;
            error_page 502 503 504 500 = @ts_failover;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header Content-Type "video/MP2T" always;
        }

        location @ts_failover {
            rewrite ^/cdn/(.*)$ /content-west/$1 break;
            proxy_pass http://s3_secondary;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header Content-Type "video/MP2T" always;
            add_header X-CDN-Failover "true" always;
        }

        # Set correct MIME type for .mpd
        location ~* \.mpd$ {
            rewrite ^/cdn/(.*)$ /content-east/$1 break;
            proxy_pass http://s3_primary;
            proxy_intercept_errors on;
            error_page 502 503 504 500 = @mpd_failover;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header Content-Type "application/dash+xml" always;
        }

        location @mpd_failover {
            rewrite ^/cdn/(.*)$ /content-west/$1 break;
            proxy_pass http://s3_secondary;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header Content-Type "application/dash+xml" always;
            add_header X-CDN-Failover "true" always;
        }

        # Set correct MIME type for .m4s
        location ~* \.m4s$ {
            rewrite ^/cdn/(.*)$ /content-east/$1 break;
            proxy_pass http://s3_primary;
            proxy_intercept_errors on;
            error_page 502 503 504 500 = @m4s_failover;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header Content-Type "video/mp4" always;
        }

        location @m4s_failover {
            rewrite ^/cdn/(.*)$ /content-west/$1 break;
            proxy_pass http://s3_secondary;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header Content-Type "video/mp4" always;
            add_header X-CDN-Failover "true" always;
        }

        # CDN endpoint for all content with failover
        location ~ ^/cdn/ {
            # Try primary bucket first, then secondary
            rewrite ^/cdn/(.*)$ /content-east/$1 break;
            proxy_pass http://s3_primary;
            proxy_intercept_errors on;
            error_page 502 503 504 500 = @s3_failover;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_set_header Range $http_range;
            proxy_set_header If-Range $http_if_range;
        }

        # Failover location
        location @s3_failover {
            rewrite ^/cdn/(.*)$ /content-west/$1 break;
            proxy_pass http://s3_secondary;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_set_header Range $http_range;
            proxy_set_header If-Range $http_if_range;
            
            add_header X-CDN-Failover "true" always;
        }

        # Legacy support for backward compatibility
        location /hls-storage/ {
            rewrite ^/hls-storage/(.*)$ /cdn/$1 permanent;
        }

        location /dash-storage/ {
            rewrite ^/dash-storage/(.*)$ /cdn/$1 permanent;
        }

        location /raw-storage/ {
            rewrite ^/raw-storage/(.*)$ /cdn/$1 permanent;
        }

        location /images-storage/ {
            rewrite ^/images-storage/(.*)$ /cdn/$1 permanent;
        }
    }
} 